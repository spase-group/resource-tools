<!--
   Standard build targets for projects.

   The file system pattern for a project follows Ant conventions 
   and contains the following sub-directories:
   
      bin  common binaries, scripts. (optional). If a bin directory is present then a kit can 
           be constructed that contains the bin commands and all the necessary jar files.
      build  This is the tree for building; Ant creates it and can empty it in the 'clean' project.
      dist  Distribution outputs go in here; the directory is created in Ant and clean empties it out
      doc  Hand crafted documentation (optional)
      lib  Imported Java libraries go in to this directory
      src  source goes in under this tree in a hierarchy which matches the package names.
           The dependency rules of <javac> requires this.
      tutorial Hand crafted turorials (optional)
      example  Usage examples. (optional)
      conf     Configuration information (optional)
      xsd      XML schema documents (optional)
      project  General information about the project including readme and license information.
      
   The project specific properties are defined in the file "project.xml" co-located with this file.
-->
<project name="igpp-build" basedir=".." default="build">

    <!-- Project specific properties-->
    <import file="project.xml"/>
    
    <!-- General project pattern -->
    <property name="project.dir"  value="project"/>
    <property name="src.dir"      value="src"/>
    <property name="lib.dir"      value="lib"/>
    <property name="doc.dir"      value="doc"/>
    <property name="bin.dir"      value="bin"/>
    <property name="tutorial.dir" value="tutorial"/>
    <property name="example.dir"  value="example"/>
    <property name="xsd.dir"      value="xsd"/>
    <property name="conf.dir"     value="conf"/>
    <property name="build.dir"    value="build"/>
    <property name="dist.dir"     value="dist"/>
    
    <property name="classes.dir"  value="${build.dir}/classes"/>
    <property name="jar.dir"      value="${build.dir}/jar"/>
    <property name="api.dir"      value="${build.dir}/api"/>
    <property name="kit.dir"      value="${build.dir}/kit"/>
    <property name="bin-kit.dir"  value="${build.dir}/bin"/>
    <property name="report.dir"   value="${build.dir}/junitreport"/>

    <!-- Where to look for local jar dependencies. Used when running tests -->
    <path id="classpath">
        <fileset dir="${lib.dir}" includes="**/*.jar" erroronmissingdir="false" />
    </path>

    <!-- Convenient targets -->
    <target name="build">
       <echo message="Settings:"/>
       <echo message="   Version: ${version}"/>
       <echo message="   Package name: ${package.name}"/>
       <echo message="   Build destination: ${build.dir}"/>
       <echo message="Targets:"/>
       <echo message="   clean: Remove all temporary files."/>
       <echo message="   compile: Generate byte codes from source. Places results in ${classes.dir}"/>
       <echo message="   jar: Compile source and create jar file. Depends on: compile"/>
       <echo message="   bin: Build command-line utilities."/>
       <echo message="   kit: Build a distribution kit which contains everything."/>
       <echo message="   api: Create the API documentation."/>
       <echo message="   dist: Build a distribution kit which contains everything. Depends on: jar,api,kit"/>
       <echo message="   run: Run the executable jar file to test the packaging. Depends on: jar"/>
       <echo message="   junit: Perform JUnit testing. Depends on: jar"/>
       <echo message="   release: Copy files to release website (${release.host})"/>
    </target>
    
    <!-- Remove current build - start fresh -->
    <target name="clean">
        <delete dir="${build.dir}"/>
        <delete dir="${dist.dir}"/>
    </target>

    <!-- Compile source code -->
    <target name="compile">
        <mkdir dir="${classes.dir}"/>
        <javac debug="true" srcdir="${src.dir}" destdir="${classes.dir}"  extdirs="${release.jar}" />
    </target>

    <!-- Create jar file for classes -->
    <target name="jar" depends="compile">
        <mkdir dir="${jar.dir}"/>
        <jar destfile="${jar.dir}/${package.name}-${version}.jar">
        	   <fileset dir="${build.dir}/classes" />
        	   <zipfileset src="${library.jar}/igpp/igpp-util-1.0.5.jar" includes="**/*.class"/>
        	   <zipfileset src="${library.jar}/apache/commons-cli-1.1.jar" includes="**/*.class"/>
        	   <zipfileset src="${library.jar}/apache/commons-net-1.4.1.jar" includes="**/*.class"/>
        	   <zipfileset src="${library.jar}/igpp/igpp-web-1.0.3.jar" includes="**/*.class"/>
            <manifest> 
                <!-- Make an executable jar - run main-class -->
                <attribute name="Main-Class" value="${main-class}"/>
                <!-- Who is building this jar? -->
                <attribute name="Built-By" value="${user.name}"/>
                <!-- Information about the program itself -->
                <attribute name="Implementation-Vendor" value="${package.vendor}"/>
                <attribute name="Implementation-Title" value="${pacakage.title}"/>
                <attribute name="Implementation-Version" value="${version}"/>
            </manifest>
        </jar>
    </target>

   <!-- Check if "bin" directory exists and set property for the "bin" target -->
   <target name="bin.check">
      <available file="${bin.dir}" type="dir" property="bin.run" />
	</target>

    <!-- Construct a self-contained "bin" directory for command-line tools -->
    <target name="bin" depends="bin.check" if="bin.run" >
        <mkdir dir="${bin-kit.dir}"/>
        <mkdir dir="${bin-kit.dir}/jar"/>
        <copy todir="${bin-kit.dir}">
           <fileset dir="${bin.dir}"/>
        </copy>
        <copy todir="${bin-kit.dir}/jar">
           <fileset dir="${jar.dir}" />
        </copy>
        <copy todir="${bin-kit.dir}/jar">
           <fileset dir="${lib.dir}" erroronmissingdir="false" />
        </copy>
    </target>
    
    <!-- Build a distribution kit which contains everything -->
    <target name="dist" depends="jar,api,kit">
        <mkdir dir="${dist.dir}"/>
        <zip destfile="${dist.dir}/${package.name}-${version}-dist.zip">
            <zipfileset dir="${jar.dir}" prefix="jar" />
            <zipfileset dir="${api.dir}" prefix="api" />
            <zipfileset dir="${lib.dir}" prefix="lib" erroronmissingdir="false" />
            <zipfileset dir="${bin-kit.dir}" prefix="bin" erroronmissingdir="false" />
            <zipfileset dir="." includes="LICENSE.TXT" erroronmissingdir="false" />
            <zipfileset dir="${project.dir}" includes="README.TXT" erroronmissingdir="false" />
            <zipfileset dir="${doc.dir}" prefix="doc" includes="**/*.pdf" erroronmissingdir="false" />
            <zipfileset dir="${tutorial.dir}" prefix="tutorial" includes="**/*.pdf" erroronmissingdir="false" />
            <zipfileset dir="${example.dir}" prefix="example" erroronmissingdir="false" />
            <zipfileset dir="${xsd.dir}" prefix="xsd" erroronmissingdir="false" />
            <zipfileset dir="${conf.dir}" prefix="conf" erroronmissingdir="false" />
        </zip>
    </target>

    <!-- Build a distribution kit which contains everything -->
    <target name="kit" depends="bin,jar,api" if="bin.run" >
        <mkdir dir="${kit.dir}"/>
        <zip destfile="${kit.dir}/${package.name}-${version}-kit.zip">
            <zipfileset dir="${bin-kit.dir}" prefix="bin" erroronmissingdir="false" />
            <zipfileset dir="." includes="LICENSE.TXT" erroronmissingdir="false" />
            <zipfileset dir="${project.dir}" includes="README.TXT" erroronmissingdir="false" />
            <zipfileset dir="${doc.dir}" prefix="doc" includes="**/*.pdf" erroronmissingdir="false" />
            <zipfileset dir="${tutorial.dir}" prefix="tutorial" includes="**/*.pdf" erroronmissingdir="false" />
            <zipfileset dir="${example.dir}" prefix="example" erroronmissingdir="false" />
            <zipfileset dir="${xsd.dir}" prefix="xsd" erroronmissingdir="false" />
            <zipfileset dir="${conf.dir}" prefix="conf" erroronmissingdir="false" />
        </zip>
    </target>

    <!-- Create the API documentation -->
    <target name="api">
        <mkdir dir="${api.dir}"/>
        <javadoc
           destdir="${api.dir}"
           author="true"
           version="true"
           use="true"
           windowtitle="${package.title}">

           <fileset dir="${src.dir}" defaultexcludes="yes">
              <include name="**/*.java" />
           </fileset>

           <doctitle><![CDATA[<h1>${package.title}</h1>]]></doctitle>
           <bottom><![CDATA[<i>${copyright}</i>]]></bottom>
           <link href="http://developer.java.sun.com/developer/products/xml/docs/api/"/>
         </javadoc>
      </target>

    <!-- Run the executable jar file to test the packaging. -->
    <target name="run" depends="jar">
        <java fork="true" classname="${main-class}">
            <classpath>
                <path refid="classpath"/>
                <path id="application" location="${jar.dir}/${ant.project.name}.jar"/>
            </classpath>
        </java>
    </target>

    <!-- Perform JUnit testing -->
    <target name="junit" depends="jar">
        <mkdir dir="${report.dir}"/>
        <junit printsummary="yes">
            <classpath>
                <path refid="classpath"/>
                <path refid="application"/>
            </classpath>
            
            <formatter type="xml"/>
            
            <batchtest fork="yes" todir="${report.dir}">
                <fileset dir="${src.dir}" includes="*Test.java"/>
            </batchtest>
        </junit>
    </target>
    
    <!-- Format JUnit test results into an HTML report -->
    <target name="junitreport">
        <junitreport todir="${report.dir}">
            <fileset dir="${report.dir}" includes="TEST-*.xml"/>
            <report todir="${report.dir}"/>
        </junitreport>
    </target>
    
    <!-- Perform a clean build and copy files into the local system -->
    <target name="release" depends="clean,dist,local" />

    <!-- Copy files to the local file system -->
    <target name="local" >
        <copy todir="${release.jar}" file="${jar.dir}/${package.name}-${version}.jar" />
    </target>

    <!-- Copy files to the release web site -->
    <target name="publish" >
    	<input message="Password for ${release.user}:" addproperty="release.password" />
    	<echo message="${release.user}:${release.password}@${release.host}:${release.path}"/>

    	<!-- Copy files -->
       <scp todir="${release.user}@${release.host}:${release.path}" password="${release.password}" >
          <fileset dir="${project.dir}" includes="info.htm"  erroronmissingdir="false" />
       </scp>
       <scp todir="${release.user}@${release.host}:${release.path}/api" password="${release.password}" >
          <fileset dir="${api.dir}"       erroronmissingdir="false" />
       </scp>
       <scp todir="${release.user}@${release.host}:${release.path}/jar" password="${release.password}" >
          <fileset dir="${jar.dir}"       erroronmissingdir="false" />
       </scp>
       <scp todir="${release.user}@${release.host}:${release.path}/lib" password="${release.password}" >
          <fileset dir="${lib.dir}"       erroronmissingdir="false" />
       </scp>
       <scp todir="${release.user}@${release.host}:${release.path}/kit" password="${release.password}" >
          <fileset dir="${kit.dir}"       erroronmissingdir="false" />
       </scp>
       <scp todir="${release.user}@${release.host}:${release.path}/dist" password="${release.password}" >
          <fileset dir="${dist.dir}"       erroronmissingdir="false" />
       </scp>
       <scp todir="${release.user}@${release.host}:${release.path}/doc" password="${release.password}" >
          <fileset dir="${doc.dir}" includes="**/*.pdf" erroronmissingdir="false" />
       </scp>
       <scp todir="${release.user}@${release.host}:${release.path}/tutorial" password="${release.password}" >
          <fileset dir="${tutorial.dir}" includes="**/*.pdf" erroronmissingdir="false" />
       </scp>
    </target>
</project>

